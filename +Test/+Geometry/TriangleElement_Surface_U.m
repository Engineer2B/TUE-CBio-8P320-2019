classdef TriangleElement_Surface_U < matlab.unittest.TestCase 
	properties (ClassSetupParameter)
		Translation = { [0 0 0],...
			[1,0,0],...
 			[0,1,0],...
			[0,0,1]};
	end
	properties(TestParameter)
			TriangleElement = {...
				Source.Geometry.TriangleElement.New(...
				[0, 0, 0],...
				[0, 1, 0],...
				[0, 0, 1]),...
				Source.Geometry.TriangleElement.New(...
				[0, 0,  0],...
				[0, 1,  0],...
				[0, 0, .5]),...
				Source.Geometry.TriangleElement.New(...
				[0 ,  0, 0],...
				[0 , .5, 0],...
				[0 ,  0, 1]),...
				Source.Geometry.TriangleElement.New(...
				[0.5, 0, 0],...
				[0  , 0, 0],...
				[0  , 0, 1]),...
				Source.Geometry.TriangleElement.New(...
				[0,  0, 0],...
				[0, .5, 0],...
				[0,  0, .5])};
		 ExpectedArea = {...
			 .5,...
			 .5*.5,...
			 .5*.5, .5*.5, .5^3};
	end
	properties
		TranslationFnHandle
	end
	methods(TestClassSetup)
		function SetTranslateFn(this, Translation)
			this.TranslationFnHandle = @(triangle) Test.Geometry...
				.TriangleElement_Surface_U.TranslateFn(triangle, Translation);
		end
	end
	methods(Test, ParameterCombination = 'sequential')
		function Surface(this, TriangleElement, ExpectedArea)
			translatedTriangle = this.TranslationFnHandle(TriangleElement);
			this.verifyEqual(translatedTriangle.Area, ExpectedArea,...
				'abstol', Test.Settings.Tolerance);
		end
	end
	methods(Access = public, Static)
		function copyTriangle = TranslateFn(triangle, translation)
			copyTriangle = triangle.Copy();
			copyTriangle.Translate(translation);
		end
	end
end
